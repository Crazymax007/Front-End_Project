import React, { useEffect, useState } from "react";
import { MapContainer, TileLayer, Marker, Popup, useMap } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet";
import { getFarmers } from "../../services/farmerService";
import { getTopVegetables } from "../../services/orderService";
import { FooterComponent } from "../../components/FooterComponent";
import pik1 from "../../assets/images/pik1.jpg";
import ma2 from "../../assets/images/ma2.jpg";
import she3 from "../../assets/images/she3.jpg";
import horapa4 from "../../assets/images/horapa4.jpg";
import bob5 from "../../assets/images/bob5.jpg";

// üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô Marker ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
const customIcon = L.icon({
  // iconUrl: "https://cdn-icons-png.flaticon.com/128/684/684908.png",
  iconUrl: "https://cdn-icons-png.flaticon.com/512/8587/8587894.png ",
  iconSize: [40, 40], // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô (‡∏Å‡∏ß‡πâ‡∏≤‡∏á x ‡∏™‡∏π‡∏á)
  iconAnchor: [20, 40], // ‡∏à‡∏∏‡∏î‡∏¢‡∏∂‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô (‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏∏‡∏î‡∏ï‡∏£‡∏á‡∏à‡∏∏‡∏î)
  popupAnchor: [0, -40], // ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà Popup ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
});

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
const ChangeView = ({ center, zoom }) => {
  const map = useMap();
  useEffect(() => {
    map.setView(center, zoom);
  }, [center, zoom, map]);
  return null;
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏° array ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏±‡∏Å (‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á component)
const popularVegetables = [
  { id: 1, name: "‡∏û‡∏£‡∏¥‡∏Å", amount: "1,000 KG", image: pik1 },
  { id: 2, name: "‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠", amount: "900 KG", image: ma2 },
  { id: 3, name: "‡∏ú‡∏±‡∏Å‡∏ä‡∏µ", amount: "800 KG", image: she3 },
  { id: 4, name: "‡πÇ‡∏´‡∏£‡∏∞‡∏û‡∏≤", amount: "700 KG", image: horapa4 },
  { id: 5, name: "‡∏ö‡∏ß‡∏ö", amount: "700 KG", image: bob5 },
];

const MapPage = () => {
  const [farmers, setFarmers] = useState([]);
  const [selectedFarmer, setSelectedFarmer] = useState(null);
  const [topVegetables, setTopVegetables] = useState([]);
  const API_BASE_URL = "http://localhost:5000";

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await getFarmers();

        if (response && Array.isArray(response.data)) {
          setFarmers(response.data);
        } else {
          console.error("Invalid data format:", response);
        }
      } catch (error) {
        console.error("Failed to fetch farmers:", error);
      }
    };
    fetchData();
    fetchVegetablesData();
  }, []);

  const handleMarkerClick = async (farmer) => {
    try {
      const response = await getTopVegetables(farmer._id);

      if (response.status === 404) {
        setSelectedFarmer(farmer);
        setTopVegetables([]);
        return;
      }

      const updatedVegetables = response.topVegetables.map((veg) => ({
        ...veg,
        imageUrl: veg.imageUrl
          ? `${API_BASE_URL}${veg.imageUrl}`
          : "/uploads/default.png",
      }));

      setSelectedFarmer(farmer);
      setTopVegetables(updatedVegetables);
    } catch (error) {
      console.error("Failed to fetch vegetables:", error);
      setSelectedFarmer(farmer);
      setTopVegetables([]);
    }
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
  const positionMap = new Map();

  const fetchVegetablesData = async () => {
    try {
      const response = await fetch("/data/vetables.json");
      if (!response.ok) {
        throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
      }
      const data = await response.json(); // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON
      console.log(data); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
      // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      return data;
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
      return [];
    }
  };

  return (
    <div className="flex flex-col">
      <div className="flex justify-center gap-6 mx-20 mb-[2%]">
        {/* Mini map */}
        <div className="rounded-3xl shadow-md overflow-hidden w-[65%]">
          <MapContainer
            center={[9.08598, 99.229071]}
            zoom={13}
            style={{
              height: "65vh", // ‡∏™‡∏π‡∏á 50% ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
              width: "100%",
              minHeight: "300px", // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
              maxHeight: "600px", // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
              zIndex: "10",
            }}
            scrollWheelZoom={true}
            dragging={true}
          >
            <ChangeView center={[9.08598, 99.229071]} zoom={15} />

            {/* ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô */}
            {/* 
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          /> */}
            <TileLayer
              url="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"
              attribution='&copy; <a href="https://www.esri.com/">Esri</a>'
            />

            {farmers
              .filter(
                (farmer) =>
                  farmer.location &&
                  farmer.location.latitude != null &&
                  farmer.location.longitude != null
              )
              .map((farmer) => {
                let { latitude, longitude } = farmer.location;
                const key = `${latitude},${longitude}`;

                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° offset
                if (positionMap.has(key)) {
                  let count = positionMap.get(key);
                  longitude += count * 0.001; // ‡∏Ç‡∏¢‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡∏ó‡∏µ‡∏•‡∏∞ 0.0001
                  positionMap.set(key, count + 1);
                } else {
                  positionMap.set(key, 1);
                }

                return (
                  <Marker
                    key={farmer._id}
                    position={[latitude, longitude]}
                    icon={customIcon}
                    eventHandlers={{
                      click: () => handleMarkerClick(farmer),
                    }}
                  >
                    <Popup>
                      <strong>
                        {farmer.firstName} {farmer.lastName} ({farmer.nickname})
                      </strong>{" "}
                      <br />
                      ‡πÇ‡∏ó‡∏£: {farmer.phone} <br />
                    </Popup>
                  </Marker>
                );
              })}
          </MapContainer>
        </div>
        {/* details */}
        <div className="bg-Green-Custom shadow-md w-[35%] flex flex-col p-6 rounded-3xl">
          <div className="flex flex-col">
            <span className="text-center p-2 text-2xl">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</span>
            {selectedFarmer ? (
              <span className="p-4 text-lg">
                ‡∏•‡∏π‡∏Å‡∏™‡∏ß‡∏ô : {selectedFarmer.firstName} {selectedFarmer.lastName}
              </span>
            ) : (
              <span className="p-4 text-lg">
                ‡∏•‡∏π‡∏Å‡∏™‡∏ß‡∏ô :{" "}
                <span className="font-light opacity-50">
                  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏™‡∏ß‡∏ô...
                </span>{" "}
              </span>
            )}
          </div>
          <div className="bg-white rounded-3xl p-4 flex-grow">
            <div className="flex flex-col">
              <span className="text-center pb-4 text-lg">
                ‡∏ú‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å (2024)
              </span>
              <div className="flex flex-col gap-4">
                {topVegetables.length > 0 ? (
                  topVegetables.map((vegetable, index) => (
                    <div key={index} className="flex items-center">
                      <span>{index + 1}.</span>
                      <img
                        src={vegetable.imageUrl}
                        className="w-[50px] h-[50px] rounded-full mx-2 p-1 border border-[#096518]"
                        alt=""
                      />
                      <div className="flex flex-col">
                        <div className="text-[#096518]">{vegetable.name}</div>
                        <div className="text-sm">
                          ‡∏õ‡∏•‡∏π‡∏Å‡πÑ‡∏î‡πâ : {vegetable.quantity} KG
                        </div>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="flex items-center justify-center text-[#096518] font-normal">
                    - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ -
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* ‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ô‡∏õ‡∏µ 2024 */}
      <div className="bg-Green-button mb-[2%] p-4 flex items-center justify-center gap-8">
        <div className="flex flex-col items-center mb-4">
          <h2 className="text-white text-2xl text-center">
            ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï
            <br />
            ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡∏™‡∏≤‡∏´‡∏Å‡∏¥‡∏à
            <br />
            ‡πÉ‡∏ô‡∏õ‡∏µ 2024
          </h2>
        </div>
        <div className="flex justify-around items-center gap-10">
          {popularVegetables.map((vegetable) => (
            <div key={vegetable.id} className="flex flex-col items-center">
              <img
                src={vegetable.image}
                alt={vegetable.name}
                className="w-32 h-36 rounded-lg object-cover"
              />
              <p className="text-white mt-2">
                {vegetable.id}. {vegetable.name}
              </p>
              <p className="text-white">{vegetable.amount}</p>
            </div>
          ))}
        </div>
      </div>
      <FooterComponent />
    </div>
  );
};

export default MapPage;
